//@version=5
strategy("Fibonacci Strategy - LONG ONLY", overlay=true, default_qty_type=strategy.percent_of_equity, default_qty_value=10, initial_capital=1000)

// ========== PARÁMETROS DE ENTRADA ==========
fib_period = input.int(50, "Fibonacci Analysis Period", minval=20, maxval=200)
pivot_window = input.int(8, "Pivot Window", minval=3, maxval=15)
min_swing_percent = input.float(2.0, "Minimum Swing %", minval=1.0, maxval=15.0, step=0.1)
min_confidence = input.int(50, "Minimum Confidence Score", minval=0, maxval=100)
required_bars = input.int(100, "Required Bars for Analysis", minval=50)

// ========== PARÁMETROS DE GESTIÓN DE RIESGO ==========
use_trailing = input.bool(true, "Use Trailing Stop")
trailing_percent = input.float(1.0, "Trailing Stop %", minval=0.1, maxval=10.0, step=0.1)
use_tp_sl = input.bool(false, "Use Take Profit / Stop Loss")
take_profit_percent = input.float(2.0, "Take Profit %", minval=0.5, maxval=10.0, step=0.1)
stop_loss_percent = input.float(1.0, "Stop Loss %", minval=0.1, maxval=5.0, step=0.1)
use_atr_trailing = input.bool(false, "Use ATR-based Trailing")
atr_multiplier = input.float(2.0, "ATR Multiplier for Trailing", minval=0.5, maxval=5.0, step=0.1)

// ========== INDICADORES ==========
sma_20 = ta.sma(close, 20)
rsi = ta.rsi(close, 14)
volume_sma = ta.sma(volume, 10)
volume_ratio = volume / volume_sma
atr = ta.atr(14)

// ========== FUNCIONES AUXILIARES ==========

// Función para encontrar pivots significativos
f_find_significant_swing(lookback) =>
    var float swing_high = 0.0
    var float swing_low = 0.0
    
    swing_high := 0.0
    swing_low := 999999.0
    
    if bar_index >= lookback + pivot_window
        for i = pivot_window to lookback - pivot_window
            current_high = high[i]
            current_low = low[i]
            
            // Verificar pivot high
            is_pivot_high = true
            for j = 1 to pivot_window
                if current_high <= high[i-j] or current_high <= high[i+j]
                    is_pivot_high := false
                    break
            
            if is_pivot_high and current_high > swing_high
                swing_high := current_high
            
            // Verificar pivot low
            is_pivot_low = true
            for j = 1 to pivot_window
                if current_low >= low[i-j] or current_low >= low[i+j]
                    is_pivot_low := false
                    break
            
            if is_pivot_low and current_low < swing_low
                swing_low := current_low
    
    [swing_high, swing_low]

// Función para calcular niveles Fibonacci
f_fibonacci_levels(swing_high, swing_low) =>
    diff = swing_high - swing_low
    fib_382 = swing_high - diff * 0.382
    fib_500 = swing_high - diff * 0.500
    fib_618 = swing_high - diff * 0.618
    [fib_382, fib_500, fib_618]

// Función para verificar proximidad a nivel Fibonacci
f_check_fibonacci_proximity(price, swing_high, swing_low) =>
    [fib_382, fib_500, fib_618] = f_fibonacci_levels(swing_high, swing_low)
    
    swing_range = swing_high - swing_low
    margin = swing_range * 0.015  // Margen más permisivo: 1.5% del swing range
    
    level_name = ""
    base_bonus = 0
    
    if math.abs(price - fib_618) <= margin
        level_name := "61.8%"
        base_bonus := 20
    else if math.abs(price - fib_500) <= margin
        level_name := "50.0%"
        base_bonus := 15
    else if math.abs(price - fib_382) <= margin
        level_name := "38.2%"
        base_bonus := 12
    
    [level_name, base_bonus]

// Función para calcular bonus de volumen
f_calculate_volume_bonus() =>
    if volume_ratio > 2.5
        5
    else if volume_ratio > 2.0
        3
    else if volume_ratio > 1.5
        1
    else
        0

// Función para calcular bonus de price action
f_calculate_price_action_bonus(signal_type) =>
    candle_body = math.abs(close - open)
    candle_range = high - low
    
    if candle_range == 0
        0
    else
        body_ratio = candle_body / candle_range
        
        if signal_type == 1  // BUY
            lower_wick = math.min(open, close) - low
            if lower_wick > candle_body * 3
                8  // Rejection wick fuerte
            else if close > open and body_ratio > 0.7
                4  // Vela alcista fuerte
            else
                0
        else if signal_type == -1  // SELL (para cerrar)
            upper_wick = high - math.max(open, close)
            if upper_wick > candle_body * 3
                8  // Rejection wick fuerte
            else if close < open and body_ratio > 0.7
                4  // Vela bajista fuerte
            else
                0
        else
            0

// Función para calcular bonus de tendencia
f_calculate_trend_bonus(signal_type) =>
    if bar_index < 30
        0
    else
        short_trend = (close - close[10]) / close[10]
        long_trend = (close - close[30]) / close[30]
        
        if signal_type == 1  // BUY
            if short_trend > 0.02 and long_trend > 0.05
                6
            else if short_trend > 0.01 and long_trend > 0.02
                3
            else
                0
        else if signal_type == -1  // SELL (para cerrar)
            if short_trend < -0.02 and long_trend < -0.05
                6
            else if short_trend < -0.01 and long_trend < -0.02
                3
            else
                0
        else
            0

// ========== FUNCIONES DE PENALIZACIÓN ==========

// Penalización por swing pequeño - REDUCIDA
f_penalize_small_swing(swing_high, swing_low) =>
    if swing_high <= swing_low
        5
    else
        swing_range = swing_high - swing_low
        swing_percentage = swing_range / swing_low * 100
        
        if swing_percentage < 1.5
            4
        else if swing_percentage < 2.5
            2
        else if swing_percentage < 4.0
            1
        else
            0

// Penalización por mercado lateral - REDUCIDA
f_penalize_sideways_market() =>
    if bar_index < 30
        2
    else
        recent_high = ta.highest(high, 30)
        recent_low = ta.lowest(low, 30)
        price_range = (recent_high - recent_low) / recent_low * 100
        
        if price_range < 4.0
            5
        else if price_range < 8.0
            3
        else if price_range < 12.0
            1
        else
            0

// Penalización por nivel Fibonacci débil
f_penalize_weak_fibonacci(swing_high, swing_low) =>
    if swing_high <= swing_low
        10
    else
        // Verificar si estamos muy cerca de extremos
        if close > swing_high * 0.99 or close < swing_low * 1.01
            8
        else
            [fib_382, fib_500, fib_618] = f_fibonacci_levels(swing_high, swing_low)
            
            min_distance = 999.0
            distances = array.from(math.abs(close - fib_382), math.abs(close - fib_500), math.abs(close - fib_618))
            
            for i = 0 to array.size(distances) - 1
                distance = array.get(distances, i) / close
                if distance < min_distance
                    min_distance := distance
            
            if min_distance > 0.02
                8
            else if min_distance > 0.01
                4
            else
                0

// Penalización por falta de confirmación
f_penalize_no_confirmation(signal_type) =>
    candle_body = math.abs(close - open)
    candle_range = high - low
    
    penalty = 0
    
    if candle_range == 0
        penalty := 6
    else
        body_ratio = candle_body / candle_range
        
        if body_ratio < 0.3
            penalty := 6
        else if body_ratio < 0.5
            penalty := 3
        
        // Penalizar dirección incorrecta
        if signal_type == 1 and close < open
            penalty := penalty + 5
        else if signal_type == -1 and close > open
            penalty := penalty + 5
    
    penalty

// Penalización por volumen bajo
f_penalize_low_volume() =>
    if volume_ratio < 0.5
        8
    else if volume_ratio < 0.7
        5
    else if volume_ratio < 0.9
        2
    else
        0

// Penalización por contra-tendencia (modificada para LONG ONLY)
f_penalize_against_trend(signal_type) =>
    if bar_index < 30
        3
    else
        long_trend = (close - close[30]) / close[30]
        
        if signal_type == 1 and long_trend < -0.02
            8
        else if signal_type == 1 and long_trend < 0
            4
        else
            0  // Para SELL no penalizamos tanto

// ========== LÓGICA PRINCIPAL ==========

// Verificar que tenemos suficientes barras
sufficient_bars = bar_index >= required_bars

// Encontrar swing significativo
[swing_high, swing_low] = f_find_significant_swing(fib_period)

// Verificar swing válido
valid_swing = swing_high > swing_low

// Verificar que el swing sea significativo
swing_range = swing_high - swing_low
swing_percentage = valid_swing ? swing_range / swing_low * 100 : 0
significant_swing = swing_percentage >= min_swing_percent

// Verificar proximidad a niveles Fibonacci
[fib_level, base_bonus] = f_check_fibonacci_proximity(close, swing_high, swing_low)
near_fib_level = fib_level != ""

// Determinar dirección de señal
signal_type = 0
if near_fib_level and bar_index >= 20
    long_trend = (close - close[20]) / close[20]
    
    // SOLO señales BUY para entrar
    if long_trend > 0.01 and strategy.position_size == 0
        signal_type := 1  // BUY para entrar
    // Señal SELL solo si tenemos posición abierta
    else if long_trend < -0.01 and strategy.position_size > 0
        signal_type := -1  // SELL para cerrar

// Calcular confianza inicial
confidence = 50
if signal_type != 0
    confidence := confidence + base_bonus
    
    // Aplicar bonus
    volume_bonus = f_calculate_volume_bonus()
    price_action_bonus = f_calculate_price_action_bonus(signal_type)
    trend_bonus = f_calculate_trend_bonus(signal_type)
    
    confidence := confidence + volume_bonus + price_action_bonus + trend_bonus
    
    // Aplicar penalizaciones
    small_swing_penalty = f_penalize_small_swing(swing_high, swing_low)
    sideways_penalty = f_penalize_sideways_market()
    weak_fib_penalty = f_penalize_weak_fibonacci(swing_high, swing_low)
    no_confirmation_penalty = f_penalize_no_confirmation(signal_type)
    low_volume_penalty = f_penalize_low_volume()
    against_trend_penalty = f_penalize_against_trend(signal_type)
    
    total_penalties = small_swing_penalty + sideways_penalty + weak_fib_penalty + no_confirmation_penalty + low_volume_penalty + against_trend_penalty
    confidence := confidence - total_penalties

// Aplicar rangos
final_confidence = math.max(30, math.min(confidence, 100))

// Condiciones de entrada y salida
long_condition = sufficient_bars and signal_type == 1 and final_confidence >= min_confidence and valid_swing and significant_swing and near_fib_level and strategy.position_size == 0
close_condition = sufficient_bars and signal_type == -1 and final_confidence >= min_confidence and strategy.position_size > 0

// ========== ESTRATEGIA LONG ONLY ==========
if long_condition
    strategy.entry("Long", strategy.long)
    
if close_condition
    strategy.close("Long")

// ========== GESTIÓN DE SALIDAS AUTOMÁTICAS ==========
// Calcular trailing points basado en porcentaje
trail_points_calc = strategy.position_avg_price * trailing_percent / 100

// Opción 1: Trailing Stop Porcentual
if use_trailing and not use_atr_trailing and strategy.position_size > 0
    strategy.exit("Long Trailing", "Long", trail_price=strategy.position_avg_price * (1 + trailing_percent/100), trail_offset=trail_points_calc)

// Opción 2: ATR-based Trailing Stop
if use_atr_trailing and use_trailing and strategy.position_size > 0
    trail_points = atr * atr_multiplier
    strategy.exit("Long ATR Trail", "Long", trail_price=strategy.position_avg_price + trail_points, trail_offset=trail_points)

// Opción 3: Take Profit + Stop Loss fijos
if use_tp_sl and not use_trailing and strategy.position_size > 0
    tp_points = strategy.position_avg_price * take_profit_percent / 100
    sl_points = strategy.position_avg_price * stop_loss_percent / 100
    strategy.exit("Long TP/SL", "Long", profit=tp_points/syminfo.mintick, loss=sl_points/syminfo.mintick)

// ========== VISUALIZACIÓN ==========

// Plotear niveles Fibonacci cuando son válidos
var line fib_618_line = na
var line fib_500_line = na
var line fib_382_line = na
var line swing_high_line = na
var line swing_low_line = na

if valid_swing and significant_swing
    [fib_382, fib_500, fib_618] = f_fibonacci_levels(swing_high, swing_low)
    
    // Limpiar líneas anteriores
    if not na(fib_618_line)
        line.delete(fib_618_line)
    if not na(fib_500_line)
        line.delete(fib_500_line)
    if not na(fib_382_line)
        line.delete(fib_382_line)
    if not na(swing_high_line)
        line.delete(swing_high_line)
    if not na(swing_low_line)
        line.delete(swing_low_line)
    
    // Crear nuevas líneas
    fib_618_line := line.new(bar_index - 20, fib_618, bar_index + 20, fib_618, color=color.red, width=2, style=line.style_dashed)
    fib_500_line := line.new(bar_index - 20, fib_500, bar_index + 20, fib_500, color=color.yellow, width=2, style=line.style_dashed)
    fib_382_line := line.new(bar_index - 20, fib_382, bar_index + 20, fib_382, color=color.green, width=2, style=line.style_dashed)
    swing_high_line := line.new(bar_index - 20, swing_high, bar_index + 20, swing_high, color=color.blue, width=1)
    swing_low_line := line.new(bar_index - 20, swing_low, bar_index + 20, swing_low, color=color.blue, width=1)
    
    // Etiquetas para niveles
    if bar_index % 20 == 0
        label.new(bar_index, fib_618, "61.8%", color=color.red, textcolor=color.white, style=label.style_label_left, size=size.small)
        label.new(bar_index, fib_500, "50.0%", color=color.yellow, textcolor=color.black, style=label.style_label_left, size=size.small)
        label.new(bar_index, fib_382, "38.2%", color=color.green, textcolor=color.white, style=label.style_label_left, size=size.small)

// Señales en el gráfico principal
plotshape(long_condition, title="Buy Signal", location=location.belowbar, color=color.green, style=shape.triangleup, size=size.small)
plotshape(close_condition, title="Close Signal", location=location.abovebar, color=color.orange, style=shape.triangledown, size=size.small)

// Mostrar confianza en etiquetas
if long_condition
    label.new(bar_index, low, "BUY\nConf: " + str.tostring(final_confidence) + "\nFib: " + fib_level, 
              color=color.green, textcolor=color.white, style=label.style_label_up, size=size.small)

if close_condition
    label.new(bar_index, high, "CLOSE\nConf: " + str.tostring(final_confidence) + "\nFib: " + fib_level, 
              color=color.orange, textcolor=color.white, style=label.style_label_down, size=size.small)

// ========== INFORMACIÓN EN TABLA ==========
if barstate.islast
    var table info_table = table.new(position.top_right, 2, 10, bgcolor=color.white, border_width=1)
    table.cell(info_table, 0, 0, "Metric", text_color=color.black, bgcolor=color.gray)
    table.cell(info_table, 1, 0, "Value", text_color=color.black, bgcolor=color.gray)
    table.cell(info_table, 0, 1, "Swing High", text_color=color.black)
    table.cell(info_table, 1, 1, str.tostring(math.round(swing_high, 4)), text_color=color.black)
    table.cell(info_table, 0, 2, "Swing Low", text_color=color.black)
    table.cell(info_table, 1, 2, str.tostring(math.round(swing_low, 4)), text_color=color.black)
    table.cell(info_table, 0, 3, "Swing %", text_color=color.black)
    table.cell(info_table, 1, 3, str.tostring(math.round(swing_percentage, 2)) + "%", text_color=color.black)
    table.cell(info_table, 0, 4, "Fib Level", text_color=color.black)
    table.cell(info_table, 1, 4, fib_level != "" ? fib_level : "NONE", text_color=color.black)
    table.cell(info_table, 0, 5, "Confidence", text_color=color.black)
    table.cell(info_table, 1, 5, str.tostring(final_confidence), text_color=color.black)
    table.cell(info_table, 0, 6, "Signal Type", text_color=color.black)
    table.cell(info_table, 1, 6, signal_type == 1 ? "BUY" : signal_type == -1 ? "CLOSE" : "NONE", 
               text_color=signal_type == 1 ? color.green : signal_type == -1 ? color.orange : color.black)
    table.cell(info_table, 0, 7, "Volume Ratio", text_color=color.black)
    table.cell(info_table, 1, 7, str.tostring(math.round(volume_ratio, 2)), text_color=color.black)
    table.cell(info_table, 0, 8, "Position", text_color=color.black)
    table.cell(info_table, 1, 8, strategy.position_size > 0 ? "LONG" : "FLAT", 
               text_color=strategy.position_size > 0 ? color.green : color.black)
    table.cell(info_table, 0, 9, "Trailing Stop", text_color=color.black)
    table.cell(info_table, 1, 9, use_trailing ? str.tostring(trailing_percent) + "%" : "OFF", text_color=color.black)